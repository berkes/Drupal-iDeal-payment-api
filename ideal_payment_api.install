<?php
// $Id$

/**
 * Implementation of hook_install().
 * Status code in payment_status column can be one of:
 * define('IPAPI_STATUS_OPEN', 0);
 * define('IPAPI_STATUS_SUCCESS', 1);
 * define('IPAPI_STATUS_CANCELLED', 2);
 * define('IPAPI_STATUS_EXPIRED', 3);
 * define('IPAPI_STATUS_FAILURE', 4);
 * â€¦or a number above 10 of your own choosing.
 */
function ideal_payment_api_install() {
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("CREATE TABLE {ideal_payment_api_issuers} (
        iss_id mediumint(9) NOT NULL,
        iss_name varchar(64) NOT NULL,
        PRIMARY KEY  (iss_id)
      ) /*!40100 DEFAULT CHARACTER SET UTF8 */ ");
      db_query("CREATE TABLE {ideal_payment_api_orders} (
        oid int(11) NOT NULL,
        user_id mediumint(9) NOT NULL,
        description varchar(64) NOT NULL,
        amount mediumint(9) NOT NULL,
        issuer_id varchar(64) NOT NULL,
        transaction_id varchar(64) NOT NULL,
        payment_status tinyint(4) NOT NULL,
        foreign_id int(11) NOT NULL,
        created_at int(11) NOT NULL,
        updated_at int(11) NOT NULL,
        PRIMARY KEY  (oid)
      ) /*!40100 DEFAULT CHARACTER SET UTF8 */ ");
      break;
    case 'pgsql':
      break;
  }
}

/**
 * Implementation of hook_update_N().
 * remove autoincrement and change to a slightly bigger int to store more orders.
 */
function ideal_payment_api_update_5001() {
  $ret = array();
  $ret[] = update_sql('ALTER TABLE {ideal_payment_api_orders} MODIFY COLUMN oid INT(11) NOT NULL DEFAULT 0');
  return $ret;
}

/**
 * Implementation of hook_update_N().
 * Add foreign_id optional column
 */
function ideal_payment_api_update_5002() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {ideal_payment_api_orders} ADD foreign_id INT(3) unsigned default '0' NOT NULL");
  return $ret;
}

/**
 * Implementation of hook_update_N().
 * remove autoincrement and change to a slightly bigger int to store more orders.
 */
function ideal_payment_api_update_5003() {
  $ret = array();
  $ret[] = update_sql('ALTER TABLE {ideal_payment_api_orders} ADD created_at INT(11) NOT NULL DEFAULT 0');
  $ret[] = update_sql('ALTER TABLE {ideal_payment_api_orders} ADD updated_at INT(11) NOT NULL DEFAULT 0');
  return $ret;
}

/**
 * Implementation of hook_update_N().
 * remove autoincrement and change to a slightly bigger int to store more orders.
 */
function ideal_payment_api_update_5004() {
  $ret = array();
  $ret[] = update_sql('ALTER TABLE {ideal_payment_api_orders} CHANGE update_at updated_at INT(11) NOT NULL DEFAULT 0');
  return $ret;
}


/**
 * Implementation of hook_uninstall().
 */
function ideal_payment_api_uninstall(){
  db_query("DROP TABLE IF EXISTS {ideal_payment_api_issuers}");
  db_query("DROP TABLE IF EXISTS {ideal_payment_api_orders}");
  db_query("DELETE FROM {variable} WHERE name LIKE 'ideal_payment_api_%'");
  cache_clear_all('variables', 'cache');
}

/**
 * Implementation of hook_requirements().
 * @TODO: on stage install, check for required openssl-extension for PHP.
 */
function ideal_payment_api_requirements($stage) {
  $t = get_t();
  if ($stage == 'install' || $stage == 'runtime') {
    $path_module = drupal_get_path('module', 'ideal_payment_api');
    if (file_exists($path_module.'/lib/ThinMPI.php')) {
      $lib = 'thinmpi'; //Rabo + old ING
      $message['ipapi_lib_missing'] = array(
        'title' => $t('iDEAL PHP library'),
        'value' => $t('iDEAL PHP %type library found in /lib', array('%type' => $lib)),
        'severity' => REQUIREMENT_OK,
      );
    }
    elseif (file_exists($path_module.'/lib/iDEALConnector.php')) {
      $lib = 'connector'; //New ING
      $message['ipapi_lib_missing'] = array(
        'title' => $t('iDEAL PHP library'),
        'value' => $t('iDEAL PHP %type library found in /lib', array('%type' => $lib)),
        'severity' => REQUIREMENT_OK,
      );
    }
    else {
      $message['ipapi_lib_missing'] = array(
        'title' => $t('iDEAL PHP library'),
        'description' => $t('iDEAL PHP library not found in /lib'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $message;
}
